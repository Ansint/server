generator client {
  provider      = "prisma-client-js"
  output        = "./__generated__"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model User {
  id String @id @default(uuid())
  email String @unique
  password String
  displayName String @unique
  picture String?

  method AuthMethod @default(CREDENTIALS) @map("auth_method")

  isEmailVerified Boolean @default(false) @map("is_email_verified")
  isTwoFactorEnabled Boolean @default(false) @map("is_two_factor_enabled")

  role UserRole @default(REGULAR)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  accounts Accounts[]
  tokens Token[]

  @@map("users")
}

model Accounts {
  id String @id @default(uuid())
  type String
  provider String

  refreshToken String? @map("refresh_token")
  accessToken String? @map("access_token")

  expiresAt Int? @map("expires_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("accounts")
}

model Token {
  id String @id @default(uuid())
  email String @unique
  token String @unique
  type EnumTokenType

  user User @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  expiresIn DateTime @map("expires_in")

  @@map("tokens")
}

enum EnumTokenType {
  VERIFICATION
  TWO_FACTOR
  PASSWORD_RESET
}

enum UserRole {
  REGULAR
  ADMIN
}

enum AuthMethod {
  CREDENTIALS
  GOOGLE
  YANDEX
}